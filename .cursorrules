# [FE] 設計

## 概要

- レイアウトとロジックをひとまとめにしたコンポーネントを1ブロックとしてそのブロックを増やしてく
- [参考サイト](https://note.com/tabelog_frontend/n/n07b4077f5cf3)

## フォルダ構成

> 例: favoriteSigners
> 

```jsx
src/components
├── atoms           // ボタンとか
├── molecules       // tableとか
├── organisms       // sideBar, header
├── pages
│   └── [page path]                           #1
│       ├── components                        
│       │   └── [component name]              #2 
│       │       ├── graphqls
│       │       │   └── **.graphql            // サーバ側との連携
│       │       ├── components
│       │       │   └── **.tsx
│       │       ├── hooks/useXXXX.ts        // ex)useSignIn.ts  
│       │       └── presenter.tsx
│       ├── index.tsx
│       └── template.tsx
└── shared                                    #3
    └── [feature name]
        └── [component name]
            ├── graphqls
            │   └── **.graphql
            ├── components
            │   └── **.tsx
            ├── hooks/useXXXX.ts
            └── presenter.tsx

```

### #1 /src/components/pages/[page path]

- ページ内容を表す。
- 中身のファイルについて
    - `index.tsx`
        - /src/pagesから呼び出されるファイル。
        - レイアウトに対してロジックをインジェクションする。
    - `template.tsx`
        - 複数のコンポーネントを呼び出し、ページのレイアウトを完成させる。
    - `template.stories.tsx`
        - storybook用。

### #2 /src/components/pages/[page path]/components

- 一つの部品のレイアウトとロジックを定義する。
- 中身のファイルについて
    - `graphqls/`
        - graphqlを定義。
    - `hooks/useXXXX.tsx`   ex)useSaveApplicant.tsx  or  useSaveApplicant.ts (jsxかどうかにより変わる)
        - ロジックを定義。
    - `hooks/useXXXX.dummy.tsx`
        - storybookを書く際、hooksのダミーデータを都度書くのが大変なため準備してます。
    - `template.tsx`
        - レイアウトを定義
    - `presenter.tsx`
        - レイアウトを定義
    - `presenter.stories.tsx`
        - storybook用。
    - `components/`
        - presenter.tsxにレイアウト定義するだけでは、肥大化する可能性あるのでもし必要であればここに定義する。
            - ex) list/, delete/, update/ 　機能ごとフォルダーを作成

### #3 /src/components/shared/[feature name]

- 共通で使うコンポーネントがある場合はここに定義する。
- 見やすいよう`[feature name]`でフォルダ分けを行う
- 中身のファイルについて
    - `#2 /src/components/pages/[page path]/components`と同様。

## コンポーネント命名について

### Pageコンポーネント

src配下のpages　コンポーネント名に`NextPage` をつけること

`src/pages/SettingNextPage.tsx`

```
// old
src/components/pages/SettingPage.tsx

// new! Nextに依存している
src/pages/SettingNextPage.tsx
```